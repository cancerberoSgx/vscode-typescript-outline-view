{
	"name": "vscode-typescript-ast-outline",
	"version": "0.0.4",
	"description": "vscode extension that adds a view in explorer panel that shows the Abstract Syntax Tree of active editor (TypeScript or JavaScript). Live updates and bindings from source code to the AST view. User can manipulate the ast nodes visually (removing, creating, moving, applying refactors, renaming, etc). Supports filtering and different AST view modes",
	"scripts": {
		"vscode:prepublish": "tsc -p ./",
		"watch": "tsc --watch",
		"build": "tsc",
		"postinstall": "node ./node_modules/vscode/bin/install"
	},
	"main": "./out/src/extension",
	"repository": "https://cancerberosgx.visualstudio.com/typescript-ast-outline",
	"devDependencies": {
		"typescript": "^2.9.1",
		"vscode": "^1.1.18",
		"tslint": "^5.10.0",
		"@types/node": "^10.0.4",
		"@types/mocha": "^5.2.0"
	},
	"dependencies": {
		"ts-simple-ast": "^12.2.0"
	},
	"license": "MIT",
	"keywords": [
		"typescript",
		"javascript",
		"AST",
		"outline"
	],
	"publisher": "cancerberosgx",
	"engines": {
		"vscode": "^1.23.0"
	},
	"displayName": "TypeScript AST Outline",
	"categories": [
		"Other",
		"Programming Languages"
	],
	"activationEvents": [
		"onView:tsAstOutline",
		"onLanguage:typescript",
		"onLanguage:javascript"
	],
	"contributes": {
		"views": {
			"explorer": [
				{
					"id": "tsAstOutline",
					"name": "TS AST Outline",
					"when": "tsAstOutlineEnabled"
				}
			]
		},
		"commands": [
			{
				"command": "tsAstOutline.refresh",
				"title": "Refresh",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "tsAstOutline.toggleASTMode",
				"title": "Toggle AST mode",
				"icon": {
					"light": "resources/light/dependency.svg",
					"dark": "resources/dark/dependency.svg"
				}
			},
			{
				"command": "tsAstOutline.refreshNode",
				"title": "Refresh",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "tsAstOutline.renameNode",
				"title": "Rename",
				"icon": {
					"light": "resources/light/rename.svg",
					"dark": "resources/dark/rename.svg"
				}
			},
			{
				"command": "tsAstOutline.removeNode",
				"title": "Remove",
				"icon": {
					"light": "resources/light/remove.svg",
					"dark": "resources/dark/remove.svg"
				}
			},
			{
				"command": "tsAstOutline.addChild",
				"title": "Add Child",
				"icon": {
					"light": "resources/light/add.svg",
					"dark": "resources/dark/add.svg"
				}
			},
			{
				"command": "tsAstOutline.refactorNode",
				"title": "Refactor",
				"icon": {
					"light": "resources/light/refactor.svg",
					"dark": "resources/dark/refactor.svg"
				}
			},
			{
				"command": "tsAstOutline.toggleHideUnnamedNodes",
				"title": "Toggle hide unnamed nodes"
			},
			{
				"command": "tsAstOutline.toggleHideNodeKindNames",
				"title": "Toggle hide node kind names"
			},
			{
				"command": "tsAstOutline.collapseAll",
				"title": "Collapse All",
				"icon": {
					"light": "resources/light/collapseAll.svg",
					"dark": "resources/dark/collapseAll.svg"
				}
			},
			{
				"command": "tsAstOutline.collapse",
				"title": "Collapse",
				"icon": {
					"light": "resources/light/collapse.svg",
					"dark": "resources/dark/collapse.svg"
				}
			}
		],
		"menus": {
			"view/title": [
				{
					"command": "tsAstOutline.collapseAll",
					"when": "view == tsAstOutline",
					"group": "navigation"
				},
				{
					"command": "tsAstOutline.refresh",
					"when": "view == tsAstOutline",
					"group": "navigation"
				},
				{
					"command": "tsAstOutline.toggleHideUnnamedNodes",
					"when": "view == tsAstOutline",
					"group": "2_workspace"
				},
				{
					"command": "tsAstOutline.toggleASTMode",
					"when": "view == tsAstOutline",
					"group": "2_workspace"
				},
				{
					"command": "tsAstOutline.toggleHideNodeKindNames",
					"when": "view == tsAstOutline",
					"group": "2_workspace",
					"type": "toggle"
				}
			],
			"view/item/context": [
				{
					"command": "tsAstOutline.refreshNode",
					"when": "view == tsAstOutline",
					"group": "inline"
				},
				{
					"command": "tsAstOutline.collapse",
					"when": "view == tsAstOutline",
					"group": "inline"
				},
				{
					"command": "tsAstOutline.refresh",
					"when": "view == tsAstOutline",
					"group": "navigation"
				},
				{
					"command": "tsAstOutline.renameNode",
					"when": "view == tsAstOutline",
					"group": "navigation"
				},
				{
					"command": "tsAstOutline.refactorNode",
					"when": "view == tsAstOutline",
					"group": "navigation"
				},
				{
					"command": "tsAstOutline.removeNode",
					"when": "view == tsAstOutline",
					"group": "navigation"
				},
				{
					"command": "tsAstOutline.addChild",
					"when": "view == tsAstOutline",
					"group": "navigation"
				}
			]
		},
		"configuration": [
			{
				"title": "TS Outline",
				"properties": {
					"tsAstOutline.autorefresh": {
						"type": "boolean",
						"default": true,
						"description": "Should the AST Outline View and the Code Editor be synchronized whether the user scrolls, select, or make modifications in any of them? or should the user be responsible of refreshing th ast outline view manually ? "
					}
				}
			}
		]
	}
}